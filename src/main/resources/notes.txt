Important features in Java8:
1. We can now define methods in interface.
2. Functional Programming: focus is now on functions instead of objects and we have a lambda functions support as well.
3. Stream Programming: It helps us to achieve functional programming and concurrency when we are programming some
operation on mutable data type.

Functional Interface, imp. scenarios:
But first of all, we have to understand why default or method definition was introduced in Java8, the reason because:
Suppose we're upgrading to java8 and like in List interface they added new methods like replaceAll() and sort() so
wherever we have List interface implemented in our code, everywhere we will get the error and will ask us to override
these two newly added methods. Hence, java came up with this concept and set these methods optional to be implemented so
that it will not give us the error on compile time.

1) ---------
interface SampleInterfaceI {
     void method() ;
}

public interface SampleInterfaceJ {
     void method();
}

Then, in Main, we have to override method() else we will have compile time error:
public class Main implements SampleInterfaceJ, SampleInterfaceI {
            @Override
            public void method() {

            }
}

2) ---------
interface SampleInterfaceI {
     default void method() {
         System.out.println("I");
     }
}

public interface SampleInterfaceJ {
     void method();
}

Then, in Main, we have to override method() else we will have compile time error:
public class Main implements SampleInterfaceJ, SampleInterfaceI {
            @Override
            public void method() {

            }
}

3) ---------
interface SampleInterfaceI {
     default void method() {
         System.out.println("I");
     }
}

public interface SampleInterfaceJ {
     default void method() {
         System.out.println("J");
     }
}

Then, in Main, we have to override method() else we will have compile time error:
public class Main implements SampleInterfaceJ, SampleInterfaceI {
            @Override
            public void method() {

            }
}

4) ---------
interface SampleInterfaceI {
     default void method() {
         System.out.println("I");
     }
}

Then, in Main, there is no need to override method():
public class Main implements SampleInterfaceI {

}

5) ---------
interface SampleInterfaceI {
     void show();
     default void method() {
         System.out.println("I");
     }
}

Then, in Main, there is no need to override method() but yes we have to override show():
public class Main implements SampleInterfaceI {
        @Override
        public void show() {

        }
}

6) -----------
interface SampleInterfaceI {

     void method();
     default void show() {
         System.out.println("I");
     }
    //////
     default boolean equals(Object o) { --> This will give a compilation error default method equals override a method
                                            of Object class.
         return false;
     }
}

7) --------
We have static method from Java8 in interface as well.
interface SampleInterfaceI {

     void method();
     default void show() {
         System.out.println("I");
     }

     static void shown() {
         System.out.println("Static support");
     }
}
In main, can be called like:
public static void main(String[] args) {
       SampleInterfaceI.shown();
}

----------------------------------------------------------------------------------------------------------
Why lamba expression was introduced in Java8?

interface A {
    void show();
}

public class Demo {
    public static void main(String...s) {
        A obj = new A() {
            public void show() {
                System.out.println("Hello");
            }
        };
        obj.show();
    }
}
After compilation, compiler creates anonymous inner class like:
Demo$1.class

If we want to avoid the creation of $1 inner class, then we can use lamba exp. like:
 public class Demo {
     public static void main(String...s) {
         A obj = () -> System.out.println("Hello");
         //if show has some param then it can be like:
         // A obj = (int i) -> System.out.println("Hello"+i);
         //or A obj = (i) -> System.out.println("Hello"+i);
         //or A obj = i -> System.out.println("Hello"+i);
         obj.show();
     }
 }
Now, after compilation, compiler will not create inner class:
Demo.class

-----------------------------------------------------------------------------------
List<Integer> list = Arrays.asList(1, 2, 3, 4);

//Before java8 we had external for loops like: normal and enhanced for-loop.

//In java8
list.forEach(index -> System.out.println(index));

forEach has the parameter of type Consumer<T> interface which has accept(T) method and this method prints the iterated
values. Hence, as we are using Java8 so instead of creating a separate class or anonymous class we are directly using
lambda expression.
------------------------------------------------------------------------------------
Stream API:
It has added in Java8 when we have a huge amount of data to be processed.

List<Integer> list = new ArrayList<>();
for(int i = 0; i < 100; i++) {
    list.add(i);
}

we can first convert above list to stream and then can process:
list.stream().forEach(System.out::println);
//If we call the stream method again on the list, then we will get the exception:
list.stream().forEach(System.out::println);

we can also make use of parallel stream if we want to make use of multithreading and it will create multiple threads
based on the no. of cores available in processor.
list.parallelStream().forEach(System.out::println);

It has also various other methods available like filter, map, findfirst, etc.
--------------------------------------------------------------------------------------
In java8 instead of java.util.Date and java.sql.Date, now we have a new package named java.time.*;
----------------------------------------------------------------------------------------

